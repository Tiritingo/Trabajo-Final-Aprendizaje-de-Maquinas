# -*- coding: utf-8 -*-
"""streamlitDespliegueTrabajoFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgzsFwziy0ceIt5JWwgL9uGfMf0apyaW
"""

import streamlit as st
import pandas as pd
import joblib

# ==============================
# 1. Configuración de la App
# ==============================
st.set_page_config(page_title="TRABAJO FINAL APRENDIZAJE DE MÁQUINAS", layout="wide")
st.title("📊 Predicción de Naturaleza de la Violencia")
st.write("Sube un archivo Excel con los datos de despliegue.")

# ==============================
# 2. Cargar Modelos
# ==============================
modelos = {
    "Logistic Regression": "LogisticRegression_pipeline.pkl",
    "Linear SVC": "LinearSVC_pipeline.pkl",
    "KNeighbors": "KNeighborsClassifier_pipeline.pkl",
    "Decision Tree": "DecisionTreeClassifier_pipeline.pkl",
    "SVM": "SVM_pipeline.pkl",
    "Voting Classifier": "VotingClassifier_pipeline.pkl",
    # "Random Forest": "RandomForestClassifier_pipeline.pkl",  # pesa demasiado
    "XGBoost": "XGBoostClassifier_pipeline.pkl"
}

# Cargar todos los modelos en memoria
modelos_cargados = {}
for nombre, archivo in modelos.items():
    try:
        modelos_cargados[nombre] = joblib.load(archivo)
    except Exception as e:
        st.warning(f"No se pudo cargar {nombre}: {e}")

# ==============================
# 2b. Cargar LabelEncoder (solo para XGBoost)
# ==============================
try:
    label_encoder = joblib.load("LabelEncoder_pipeline.pkl")
except Exception as e:
    label_encoder = None
    st.warning(f"No se pudo cargar el LabelEncoder: {e}")

# ==============================
# 3. Subir archivo Excel
# ==============================
uploaded_file = st.file_uploader("📂 Sube el archivo Excel con el DataFrame de despliegue", type=["xlsx"])

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)
    st.write("### Vista previa de los datos:")
    st.dataframe(df.head())

    # ==============================
    # 4. Predicciones con cada modelo
    # ==============================
    resultados = pd.DataFrame()

    for nombre, modelo in modelos_cargados.items():
        try:
            y_pred = modelo.predict(df)

            # Si es XGBoost, decodificar con el LabelEncoder
            if nombre == "XGBoost" and label_encoder is not None:
                y_pred = label_encoder.inverse_transform(y_pred)

            resultados[nombre] = y_pred

        except Exception as e:
            st.error(f"Error al predecir con {nombre}: {e}")

    # ==============================
    # 5. Mostrar comparación
    # ==============================
    st.write("### 📊 Comparación de resultados por modelo")
    st.dataframe(resultados)

    # Opción para descargar la tabla
    st.download_button(
        label="⬇️ Descargar resultados",
        data=resultados.to_csv(index=False).encode('utf-8'),
        file_name="comparacion_modelos.csv",
        mime="text/csv"
    )
